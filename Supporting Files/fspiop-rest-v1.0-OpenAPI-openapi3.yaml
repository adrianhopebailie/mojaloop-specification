openapi: 3.0.2
info:
    title: Open API for FSP Interoperability (FSPIOP)
    description: >-
        Based on [API Definition version
        1.0](https://github.com/mojaloop/mojaloop-specification/blob/develop/API%20Definition%20v1.0.pdf).


        **Note:** The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
    license:
        name: Open API for FSP Interoperability (FSPIOP)
        url: 'https://github.com/mojaloop/mojaloop-specification/blob/develop/LICENSE.md'
    version: '1.0'
paths:
    '/participants/{Type}/{ID}/error':
        put:
            tags:
                - participants
            summary: Return participant information error
            description: >-
                If the server is unable to find, create or delete the associated FSP of the provided identity,
                or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error`
                (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.
            operationId: ParticipantsErrorByTypeAndID
            parameters:
                -
                    $ref: '#/components/parameters/Type'
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/vnd.interoperability.resource+json;version=1.0:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/participants/{Type}/{ID}/{SubId}/error':
        put:
            tags:
                - participants
            summary: Return participant information error
            description: >-
                If the server is unable to find, create or delete the associated FSP of the provided identity,
                or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error`
                (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used.
            operationId: ParticipantsSubIdErrorByTypeAndID
            parameters:
                -
                    $ref: '#/components/parameters/Type'
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/SubId'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/participants/{ID}':
        put:
            tags:
                - participants
            summary: Return bulk participant information
            description: >-
                The callback `PUT /participants/{ID}` is used to inform the client of the result of the
                creation of the provided list of identities.
            operationId: putParticipantsByID
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Participant information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParticipantsIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/participants/{ID}/error':
        put:
            tags:
                - participants
            summary: Return bulk participant information error
            description: >-
                If there is an error during FSP information creation in the server, the error callback `PUT
                /participants/{ID}/error` is used. The `{ID}` in the URI should contain the requestId that was
                used for the creation of the participant information.
            operationId: ParticipantsByIDAndError
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/parties/{Type}/{ID}/error':
        put:
            tags:
                - parties
            summary: Return party information error
            description: >-
                If the server is unable to find Party information of the provided identity, or another
                processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT
                /parties/{Type}/{ID}/{SubI}/error`) is used.
            operationId: PartiesErrorByTypeAndID
            parameters:
                -
                    $ref: '#/components/parameters/Type'
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/parties/{Type}/{ID}/{SubId}/error':
        put:
            tags:
                - parties
            summary: Return party information error
            description: >-
                If the server is unable to find Party information of the provided identity, or another
                processing error occurred, the error callback `PUT /parties/{Type}/{ID}/error` (or `PUT
                /parties/{Type}/{ID}/{SubId}/error`) is used.
            operationId: PartiesSubIdErrorByTypeAndID
            parameters:
                -
                    $ref: '#/components/parameters/Type'
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/SubId'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/transactionRequests/{ID}/error':
        put:
            tags:
                - transactionRequests
            summary: Return transaction request information error
            description: >-
                If the server is unable to find or create a transaction request, or another processing error
                occurs, the error callback `PUT /transactionRequests/{ID}/error` is used. The `{ID}` in the
                URI should contain the `transactionRequestId` that was used for the creation of the
                transaction request, or the `{ID}` that was used in the `GET /transactionRequests/{ID}`.
            operationId: TransactionRequestsErrorByID
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/quotes/{ID}/error':
        put:
            tags:
                - quotes
            summary: Return quote information error
            description: >-
                If the server is unable to find or create a quote, or some other processing error occurs, the
                error callback `PUT /quotes/{ID}/error` is used. The `{ID}` in the URI should contain the
                `quoteId` that was used for the creation of the quote, or the `{ID}` that was used in the `GET
                /quotes/{ID}` request.
            operationId: QuotesByIDAndError
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/transfers/{ID}/error':
        put:
            tags:
                - transfers
            summary: Return transfer information error
            description: >-
                If the server is unable to find or create a transfer, or another processing error occurs, the
                error callback `PUT /transfers/{ID}/error` is used. The `{ID}` in the URI should contain the
                `transferId` that was used for the creation of the transfer, or the `{ID}` that was used in
                the `GET /transfers/{ID}`.
            operationId: TransfersByIDAndError
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/transactions/{ID}/error':
        put:
            tags:
                - transactions
            summary: Return transaction information error
            description: >-
                If the server is unable to find or create a transaction, or another processing error occurs,
                the error callback `PUT /transactions/{ID}/error` is used. The `{ID}` in the URI should
                contain the `{ID}` that was used in the `GET /transactions/{ID}` request.
            operationId: TransactionsErrorByID
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/bulkQuotes/{ID}/error':
        put:
            tags:
                - bulkQuotes
            summary: Return bulk quote information error
            description: >-
                If the server is unable to find or create a bulk quote, or another processing error occurs,
                the error callback `PUT /bulkQuotes/{ID}/error` is used. The `{ID}` in the URI should contain
                the `bulkQuoteId` that was used for the creation of the bulk quote, or the `{ID}` that was
                used in the `GET /bulkQuotes/{ID}` request.
            operationId: BulkQuotesErrorByID
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/bulkTransfers/{ID}/error':
        put:
            tags:
                - bulkTransfers
            summary: Return bulk transfer information error
            description: >-
                If the server is unable to find or create a bulk transfer, or another processing error occurs,
                the error callback `PUT /bulkTransfers/{ID}/error` is used. The `{ID}` in the URI should
                contain the `bulkTransferId` that was used for the creation of the bulk transfer (`POST
                /bulkTransfers`), or the `{ID}` that was used in the `GET /bulkTransfers/{ID}` request.
            operationId: BulkTransfersErrorByID
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/authorizations/{ID}/error':
        put:
            tags:
                - authorizations
            summary: Return authorization error
            description: >-
                If the server is unable to find the transaction request, or another processing error occurs,
                the error callback `PUT /authorizations/{ID}/error` is used. The `{ID}` in the URI should
                contain the `{ID}` that was used in the `GET /authorizations/{ID}`.
            operationId: AuthorizationsByIDAndError
            parameters:
                -
                    $ref: '#/components/parameters/ID'
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the error returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ErrorInformationObject'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/authorizations/{ID}':
        get:
            tags:
                - authorizations
            summary: Perform authorization
            description: >-
                The HTTP request `GET /authorizations/{ID}` is used to request the Payer to enter the
                applicable credentials in the Payee FSP system. The `{ID}` in the URI should contain the
                `transactionRequestID`, received from the `POST /transactionRequests` service earlier in the
                process. This request requires a query string to be included in the URI, with the following
                key-value pairs*:*


                - `authenticationType={Type}`, where `{Type}` value is a valid authentication type from the
                enumeration `AuthenticationType`.


                - `retriesLeft=={NrOfRetries}`, where `{NrOfRetries}` is the number of retries left before the
                financial transaction is rejected. `{NrOfRetries}` must be expressed in the form of the data
                type `Integer`. `retriesLeft=1` means that this is the last retry before the financial
                transaction is rejected.


                - `amount={Amount}`, where `{Amount}` is the transaction amount that will be withdrawn from
                the Payer’s account. `{Amount}` must be expressed in the form of the data type `Amount`.


                - `currency={Currency}`, where `{Currency}` is the transaction currency for the amount that
                will be withdrawn from the Payer’s account. The `{Currency}` value must be expressed in the
                form of the enumeration `CurrencyCode`.


                The following is an example URI containing all the required key-value pairs in the query
                string*:*


                `GET
                /authorization/3d492671-b7af-4f3f-88de-76169b1bdf88?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD`
            operationId: AuthorizationsByIDGet
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - authorizations
            summary: Return authorization result
            description: >-
                The callback `PUT /authorizations/{ID}` is used to inform the client of the result of a
                previously-requested authorization. The `{ID}` in the URI should contain the `{ID}` that was
                used in the `GET /authorizations/{ID}` request.
            operationId: AuthorizationsByIDPut
            requestBody:
                description: Authorization result returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AuthorizationsIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    /bulkQuotes:
        post:
            tags:
                - bulkQuotes
            summary: Calculate bulk quote
            description: >-
                The HTTP request `POST /bulkQuotes` is used to request the creation of a bulk quote for the
                provided financial transactions in the server.
            operationId: BulkQuotes
            parameters:
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the bulk quote to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BulkQuotesPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/bulkQuotes/{ID}':
        get:
            tags:
                - bulkQuotes
            summary: Retrieve bulk quote information
            description: >-
                The HTTP request `GET /bulkQuotes/{ID}` is used to get information regarding a bulk quote
                created or requested earlier. The `{ID}` in the URI should contain the `bulkQuoteId` that was
                used for the creation of the bulk quote.
            operationId: BulkQuotesByID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - bulkQuotes
            summary: Return bulk quote information
            description: >-
                The callback `PUT /bulkQuotes/{ID}` is used to inform the client of a requested or created
                bulk quote. The `{ID}` in the URI should contain the `bulkQuoteId` that was used for the
                creation of the bulk quote, or the `{ID}` that was used in the `GET /bulkQuotes/{ID}` request.
            operationId: BulkQuotesByID1
            requestBody:
                description: Bulk quote information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BulkQuotesIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    /bulkTransfers:
        post:
            tags:
                - bulkTransfers
            summary: Perform bulk transfer
            description: >-
                The HTTP request `POST /bulkTransfers` is used to request the creation of a bulk transfer in
                the server.
            operationId: BulkTransfers
            parameters:
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the bulk transfer to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BulkTransfersPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/transfers/{ID}':
        get:
            tags:
                - transfers
            summary: Retrieve transfer information
            description: >-
                The HTTP request `GET /transfers/{ID}` is used to get information regarding a transfer created
                or requested earlier. The `{ID}` in the URI should contain the `transferId` that was used for
                the creation of the transfer.
            operationId: TransfersByIDGet
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - transfers
            summary: Return transfer information
            description: >-
                The callback `PUT /transfers/{ID}` is used to inform the client of a requested or created
                transfer. The `{ID}` in the URI should contain the `transferId` that was used for the creation
                of the transfer, or the `{ID}` that was used in the `GET /transfers/{ID}` request.
            operationId: TransfersByIDPut
            requestBody:
                description: Transfer information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TransfersIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    /transfers:
        post:
            tags:
                - transfers
            summary: Perform transfer
            description: >-
                The HTTP request `POST /transfers` is used to request the creation of a transfer for the next
                ledger, and a financial transaction for the Payee FSP.
            operationId: transfers
            parameters:
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the transfer to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TransfersPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/transactions/{ID}':
        get:
            tags:
                - transactions
            summary: Retrieve transaction information
            description: >-
                The HTTP request `GET /transactions/{ID}` is used to get transaction information regarding a
                financial transaction created earlier. The `{ID}` in the URI should contain the
                `transactionId` that was used for the creation of the quote, as the transaction is created as
                part of another process (the transfer process).
            operationId: TransactionsByID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - transactions
            summary: Return transaction information
            description: >-
                The callback `PUT /transactions/{ID}` is used to inform the client of a requested transaction.
                The `{ID}` in the URI should contain the `{ID}` that was used in the `GET /transactions/{ID}`
                request.
            operationId: TransactionsByID1
            requestBody:
                description: Transaction information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TransactionsIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    '/transactionRequests/{ID}':
        get:
            tags:
                - transactionRequests
            summary: Retrieve transaction request information
            description: >-
                The HTTP request `GET /transactionRequests/{ID}` is used to get information regarding a
                transaction request created or requested earlier. The `{ID}` in the URI should contain the
                `transactionRequestId` that was used for the creation of the transaction request.
            operationId: TransactionRequestsByID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - transactionRequests
            summary: Return transaction request information
            description: >-
                The callback `PUT /transactionRequests/{ID}` is used to inform the client of a requested or
                created transaction request. The `{ID}` in the URI should contain the `transactionRequestId`
                that was used for the creation of the transaction request, or the `{ID}` that was used in the
                `GET /transactionRequests/{ID}`.
            operationId: TransactionRequestsByIDPut
            requestBody:
                description: Transaction request information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TransactionRequestsIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    /transactionRequests:
        post:
            tags:
                - transactionRequests
            summary: Perform transaction request
            description: >-
                The HTTP request `POST /transactionRequests` is used to request the creation of a transaction
                request for the provided financial transaction in the server.
            operationId: TransactionRequests
            parameters:
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Transaction request to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TransactionRequestsPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/quotes/{ID}':
        get:
            tags:
                - quotes
            summary: Retrieve quote information
            description: >-
                The HTTP request `GET /quotes/{ID}` is used to get information regarding a quote created or
                requested earlier. The `{ID}` in the URI should contain the `quoteId` that was used for the
                creation of the quote.
            operationId: QuotesByID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - quotes
            summary: Return quote information
            description: >-
                The callback `PUT /quotes/{ID}` is used to inform the client of a requested or created quote.
                The `{ID}` in the URI should contain the `quoteId` that was used for the creation of the
                quote, or the `{ID}` that was used in the `GET /quotes/{ID}` request.
            operationId: QuotesByID1
            requestBody:
                description: Quote information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuotesIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    /quotes:
        post:
            tags:
                - quotes
            summary: Calculate quote
            description: >-
                The HTTP request `POST /quotes` is used to request the creation of a quote for the provided
                financial transaction in the server.
            operationId: Quotes
            parameters:
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Details of the quote to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QuotesPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/parties/{Type}/{ID}/{SubId}':
        get:
            tags:
                - parties
            summary: Look up party information
            description: >-
                The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to
                look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally
                `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET
                /parties/BUSINESS/shoecompany/employee1`).
            operationId: PartiesSubIdByTypeAndID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - parties
            summary: Return party information
            description: >-
                The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to
                inform the client of a successful result of the Party information lookup.
            operationId: PartiesSubIdByTypeAndIDPut
            requestBody:
                description: Party information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PartiesTypeIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/Type'
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/SubId'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    '/parties/{Type}/{ID}':
        get:
            tags:
                - parties
            summary: Look up party information
            description: >-
                The HTTP request `GET /parties/{Type}/{ID}` (or `GET /parties/{Type}/{ID}/{SubId}`) is used to
                look up information regarding the requested Party, defined by `{Type}`, `{ID}` and optionally
                `{SubId}` (for example, `GET /parties/MSISDN/123456789`, or `GET
                /parties/BUSINESS/shoecompany/employee1`).
            operationId: PartiesByTypeAndID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - parties
            summary: Return party information
            description: >-
                The callback `PUT /parties/{Type}/{ID}` (or `PUT /parties/{Type}/{ID}/{SubId}`) is used to
                inform the client of a successful result of the Party information lookup.
            operationId: PartiesByTypeAndID2
            requestBody:
                description: Party information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PartiesTypeIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/Type'
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    '/bulkTransfers/{ID}':
        get:
            tags:
                - bulkTransfers
            summary: Retrieve bulk transfer information
            description: >-
                The HTTP request `GET /bulkTransfers/{ID}` is used to get information regarding a bulk
                transfer created or requested earlier. The `{ID}` in the URI should contain the
                `bulkTransferId` that was used for the creation of the bulk transfer.
            operationId: BulkTransferByID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - bulkTransfers
            summary: Return bulk transfer information
            description: >-
                The callback `PUT /bulkTransfers/{ID}` is used to inform the client of a requested or created
                bulk transfer. The `{ID}` in the URI should contain the `bulkTransferId` that was used for the
                creation of the bulk transfer (`POST /bulkTransfers`), or the `{ID}` that was used in the `GET
                /bulkTransfers/{ID}` request.
            operationId: BulkTransfersByIDPut
            requestBody:
                description: Bulk transfer information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BulkTransfersIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    /participants:
        post:
            tags:
                - participants
            summary: Create bulk participant information
            description: >-
                The HTTP request `POST /participants` is used to create information in the server regarding
                the provided list of identities. This request should be used for bulk creation of FSP
                information for more than one Party. The optional currency parameter should indicate that each
                provided Party supports the currency.
            operationId: Participants1
            parameters:
                -
                    $ref: '#/components/parameters/Date'
                -
                    $ref: '#/components/parameters/X-Forwarded-For'
                -
                    $ref: '#/components/parameters/FSPIOP-Source'
                -
                    $ref: '#/components/parameters/FSPIOP-Destination'
                -
                    $ref: '#/components/parameters/FSPIOP-Encryption'
                -
                    $ref: '#/components/parameters/FSPIOP-Signature'
                -
                    $ref: '#/components/parameters/FSPIOP-URI'
                -
                    $ref: '#/components/parameters/FSPIOP-HTTP-Method'
            requestBody:
                description: Participant information to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParticipantsPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
    '/participants/{Type}/{ID}/{SubId}':
        get:
            tags:
                - participants
            summary: Look up participant information
            description: >-
                The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`)
                is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and
                optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET
                /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query
                string for filtering of currency. To use filtering of currency, the HTTP request `GET
                /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
            operationId: ParticipantsSubIdByTypeAndID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - participants
            summary: Return participant information
            description: >-
                The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is
                used to inform the client of a successful result of the lookup, creation, or deletion of the
                FSP information related to the Party. If the FSP information is deleted, the fspId element
                should be empty; otherwise the element should include the FSP information for the Party.
            operationId: ParticipantsSubIdByTypeAndID3
            requestBody:
                description: Participant information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParticipantsTypeIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        post:
            tags:
                - participants
            summary: Create participant information
            description: >-
                The HTTP request `POST /participants/{Type}/{ID}` (or `POST
                /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the
                provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST
                /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`).
            operationId: ParticipantsSubIdByTypeAndIDPost
            requestBody:
                description: Participant information to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParticipantsTypeIDSubIDPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        delete:
            tags:
                - participants
            summary: Delete participant information
            description: >-
                The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE
                /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the
                provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE
                /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a
                query string to delete FSP information regarding a specific currency only. To delete a
                specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ`
                should be used, where `XYZ` is the requested currency.


                **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is
                deleting the FSP information.
            operationId: ParticipantsSubIdByTypeAndID2
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/Type'
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/SubId'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    '/participants/{Type}/{ID}':
        get:
            tags:
                - participants
            summary: Look up participant information
            description: >-
                The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`)
                is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and
                optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET
                /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query
                string for filtering of currency. To use filtering of currency, the HTTP request `GET
                /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
            operationId: ParticipantsByTypeAndID
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        put:
            tags:
                - participants
            summary: Return participant information
            description: >-
                The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is
                used to inform the client of a successful result of the lookup, creation, or deletion of the
                FSP information related to the Party. If the FSP information is deleted, the fspId element
                should be empty; otherwise the element should include the FSP information for the Party.
            operationId: ParticipantsByTypeAndID3
            requestBody:
                description: Participant information returned.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParticipantsTypeIDPutResponse'
                required: true
            responses:
                '200':
                    $ref: '#/components/responses/200'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        post:
            tags:
                - participants
            summary: Create participant information
            description: >-
                The HTTP request `POST /participants/{Type}/{ID}` (or `POST
                /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the
                provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST
                /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`).
            operationId: ParticipantsByIDAndType
            requestBody:
                description: Participant information to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParticipantsTypeIDSubIDPostRequest'
                required: true
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        delete:
            tags:
                - participants
            summary: Delete participant information
            description: >-
                The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE
                /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the
                provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE
                /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a
                query string to delete FSP information regarding a specific currency only. To delete a
                specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ`
                should be used, where `XYZ` is the requested currency.


                **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is
                deleting the FSP information.
            operationId: ParticipantsByTypeAndID2
            responses:
                '202':
                    $ref: '#/components/responses/202'
                '400':
                    $ref: '#/components/responses/400'
                '401':
                    $ref: '#/components/responses/401'
                '403':
                    $ref: '#/components/responses/403'
                '404':
                    $ref: '#/components/responses/404'
                '405':
                    $ref: '#/components/responses/405'
                '406':
                    $ref: '#/components/responses/406'
                '501':
                    $ref: '#/components/responses/501'
                '503':
                    $ref: '#/components/responses/503'
        parameters:
            -
                $ref: '#/components/parameters/Type'
            -
                $ref: '#/components/parameters/ID'
            -
                $ref: '#/components/parameters/Date'
            -
                $ref: '#/components/parameters/X-Forwarded-For'
            -
                $ref: '#/components/parameters/FSPIOP-Source'
            -
                $ref: '#/components/parameters/FSPIOP-Destination'
            -
                $ref: '#/components/parameters/FSPIOP-Encryption'
            -
                $ref: '#/components/parameters/FSPIOP-Signature'
            -
                $ref: '#/components/parameters/FSPIOP-URI'
            -
                $ref: '#/components/parameters/FSPIOP-HTTP-Method'
components:
    schemas:
        Amount:
            title: Amount
            description: >-
                The API data type Amount is a JSON String in a canonical format that is restricted by a
                regular expression for interoperability reasons. This pattern does not allow any trailing
                zeroes at all, but allows an amount without a minor currency unit. It also only allows four
                digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits
                in the major currency unit is not allowed.
            pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
            type: string
        AmountType:
            title: AmountType
            description: >-
                Below are the allowed values for the enumeration AmountType.

                - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn
                from the Payer account including any fees.

                - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should
                be sent to the receiver exclusive of any fees.
            enum:
                - SEND
                - RECEIVE
            type: string
        AuthenticationType:
            title: AuthenticationType
            description: |-
                Below are the allowed values for the enumeration AuthenticationType.
                - OTP - One-time password generated by the Payer FSP.
                - QRCODE - QR code used as One Time Password.
            enum:
                - OTP
                - QRCODE
            type: string
        AuthenticationValue:
            title: AuthenticationValue
            description: >-
                Contains the authentication value. The format depends on the authentication type used in the
                AuthenticationInfo complex type.
            pattern: '^\d{3,10}$|^\S{1,64}$'
            oneOf:
                -
                    $ref: '#/components/schemas/OtpValue'
                -
                    $ref: '#/components/schemas/QRCODE'
        AuthorizationResponse:
            title: AuthorizationResponse
            description: |-
                Below are the allowed values for the enumeration.
                - ENTERED - Consumer entered the authentication value.
                - REJECTED - Consumer rejected the transaction.
                - RESEND - Consumer requested to resend the authentication value.
            enum:
                - ENTERED
                - REJECTED
                - RESEND
            type: string
        BalanceOfPayments:
            title: BalanceOfPayments
            description: >-
                (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON
                String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading
                zero is not allowed.
            pattern: '^[1-9]\d{2}$'
            type: string
        BinaryString:
            description: >-
                The API data type BinaryString is a JSON String. The string is a base64url  encoding of a
                string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed
                to ensure that the string is a multiple of 4 characters. The length restriction indicates the
                allowed number of characters.
            pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
            type: string
        BinaryString32:
            description: >-
                The API data type BinaryString32 is a fixed size version of the API data type BinaryString,
                where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not
                use a padding character as the size of the underlying data is fixed.
            pattern: '^[A-Za-z0-9-_]{43}$'
            type: string
        BulkTransferState:
            title: BulkTransactionState
            description: |-
                Below are the allowed values for the enumeration.
                - RECEIVED - Payee FSP has received the bulk transfer from the Payer FSP.
                - PENDING - Payee FSP has validated the bulk transfer.
                - ACCEPTED - Payee FSP has accepted to process the bulk transfer.
                - PROCESSING - Payee FSP has started to transfer fund to the Payees.
                - COMPLETED - Payee FSP has completed transfer of funds to the Payees.
                - REJECTED - Payee FSP has rejected to process the bulk transfer.
            enum:
                - RECEIVED
                - PENDING
                - ACCEPTED
                - PROCESSING
                - COMPLETED
                - REJECTED
            type: string
        Code:
            title: Code
            description: Any code/token returned by the Payee FSP (TokenCode Type).
            pattern: '^[0-9a-zA-Z]{4,32}$'
            type: string
        CorrelationId:
            title: CorrelationId
            description: >-
                Identifier that correlates all messages of the same sequence. The API data type UUID
                (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC
                4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for
                interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4
                dashes (‘-‘).
            pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
            type: string
        Currency:
            title: Currency
            description: >-
                The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as
                three-letter alphabetic codes are used as the standard naming representation for currencies.
            maxLength: 3
            minLength: 3
            enum:
                - AED
                - AFN
                - ALL
                - AMD
                - ANG
                - AOA
                - ARS
                - AUD
                - AWG
                - AZN
                - BAM
                - BBD
                - BDT
                - BGN
                - BHD
                - BIF
                - BMD
                - BND
                - BOB
                - BRL
                - BSD
                - BTN
                - BWP
                - BYN
                - BZD
                - CAD
                - CDF
                - CHF
                - CLP
                - CNY
                - COP
                - CRC
                - CUC
                - CUP
                - CVE
                - CZK
                - DJF
                - DKK
                - DOP
                - DZD
                - EGP
                - ERN
                - ETB
                - EUR
                - FJD
                - FKP
                - GBP
                - GEL
                - GGP
                - GHS
                - GIP
                - GMD
                - GNF
                - GTQ
                - GYD
                - HKD
                - HNL
                - HRK
                - HTG
                - HUF
                - IDR
                - ILS
                - IMP
                - INR
                - IQD
                - IRR
                - ISK
                - JEP
                - JMD
                - JOD
                - JPY
                - KES
                - KGS
                - KHR
                - KMF
                - KPW
                - KRW
                - KWD
                - KYD
                - KZT
                - LAK
                - LBP
                - LKR
                - LRD
                - LSL
                - LYD
                - MAD
                - MDL
                - MGA
                - MKD
                - MMK
                - MNT
                - MOP
                - MRO
                - MUR
                - MVR
                - MWK
                - MXN
                - MYR
                - MZN
                - NAD
                - NGN
                - NIO
                - NOK
                - NPR
                - NZD
                - OMR
                - PAB
                - PEN
                - PGK
                - PHP
                - PKR
                - PLN
                - PYG
                - QAR
                - RON
                - RSD
                - RUB
                - RWF
                - SAR
                - SBD
                - SCR
                - SDG
                - SEK
                - SGD
                - SHP
                - SLL
                - SOS
                - SPL
                - SRD
                - STD
                - SVC
                - SYP
                - SZL
                - THB
                - TJS
                - TMT
                - TND
                - TOP
                - TRY
                - TTD
                - TVD
                - TWD
                - TZS
                - UAH
                - UGX
                - USD
                - UYU
                - UZS
                - VEF
                - VND
                - VUV
                - WST
                - XAF
                - XCD
                - XDR
                - XOF
                - XPF
                - YER
                - ZAR
                - ZMW
                - ZWD
            type: string
        Date:
            title: Date
            description: >-
                The API data type Date is a JSON String in a lexical format that is restricted by a regular
                expression for interoperability reasons. This format, as specified in ISO 8601, contains a
                date only. A more readable version of the format is yyyy-MM-dd. Examples are "1982-05-23",
                "1987-08-05”.
            pattern: >-
                ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
            type: string
        DateOfBirth:
            title: DateofBirth (type Date)
            description: Date of Birth of the Party.
            pattern: >-
                ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$
            type: string
        DateTime:
            title: DateTime
            description: >-
                The API data type DateTime is a JSON String in a lexical format that is restricted by a
                regular expression for interoperability reasons. The format is according to [ISO
                8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date,
                time and time zone format. A more readable version of the format is
                yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00",
                "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
            pattern: >-
                ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
            type: string
        ErrorCode:
            title: ErrorCode
            description: >-
                The API data type ErrorCode is a JSON String of four characters, consisting of digits only.
                Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is
                a four-digit number, for example, 1234, where the first number (1 in the example) represents
                the high-level error category, the second number (2 in the example) represents the low-level
                error category, and the last two numbers (34 in the example) represent the specific error.
            pattern: '^[1-9]\d{3}$'
            type: string
        ErrorDescription:
            title: ErrorDescription
            description: Error description string.
            maxLength: 128
            minLength: 1
            type: string
        ExtensionKey:
            title: ExtensionKey
            description: Extension key.
            maxLength: 32
            minLength: 1
            type: string
        ExtensionValue:
            title: ExtensionValue
            description: Extension value.
            maxLength: 128
            minLength: 1
            type: string
        FirstName:
            title: FirstName
            description: First name of the Party (Name Type).
            maxLength: 128
            minLength: 1
            pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
            type: string
        FspId:
            title: FspId
            description: FSP identifier.
            maxLength: 32
            minLength: 1
            type: string
        IlpCondition:
            title: IlpCondition
            description: Condition that must be attached to the transfer by the Payer.
            maxLength: 48
            pattern: '^[A-Za-z0-9-_]{43}$'
            type: string
        IlpFulfilment:
            title: IlpFulfilment
            description: Fulfilment that must be attached to the transfer by the Payee.
            maxLength: 48
            pattern: '^[A-Za-z0-9-_]{43}$'
            type: string
        IlpPacket:
            title: IlpPacket
            description: Information for recipient (transport layer information).
            maxLength: 32768
            minLength: 1
            pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
            type: string
        Integer:
            title: Integer
            description: >-
                The API data type Integer is a JSON String consisting of digits only. Negative numbers and
                leading zeroes are not allowed. The data type is always limited to a specific number of
                digits.
            pattern: '^[1-9]\d*$'
            type: string
        LastName:
            title: LastName
            description: Last name of the Party (Name Type).
            maxLength: 128
            minLength: 1
            pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
            type: string
        Latitude:
            title: Latitude
            description: >-
                The API data type Latitude is a JSON String in a lexical format that is restricted by a
                regular expression for interoperability reasons.
            pattern: '^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$'
            type: string
        Longitude:
            title: Longitude
            description: >-
                The API data type Longitude is a JSON String in a lexical format that is restricted by a
                regular expression for interoperability reasons.
            pattern: '^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$'
            type: string
        MerchantClassificationCode:
            title: MerchantClassificationCode
            description: >-
                A limited set of pre-defined numbers. This list would be a limited set of numbers identifying
                a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
            pattern: '^[\d]{1,4}$'
            type: string
        MiddleName:
            title: MiddleName
            description: Middle name of the Party (Name Type).
            maxLength: 128
            minLength: 1
            pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
            type: string
        Name:
            title: Name
            description: >-
                The API data type Name is a JSON String, restricted by a regular expression to avoid
                characters which are generally not used in a name.


                Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w
                .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all
                Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,)
                and space characters ( ).


                **Note:** In some programming languages, Unicode support must be specifically enabled. For
                example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode
                characters.
            pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
            type: string
        Note:
            title: Note
            description: Memo assigned to transaction.
            maxLength: 128
            minLength: 1
            type: string
        OtpValue:
            title: OtpValue
            description: >-
                The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only.
                Negative numbers are not allowed. One or more leading zeros are allowed.
            pattern: '^\d{3,10}$'
            type: string
        PartyIdentifier:
            title: PartyIdentifier
            description: Identifier of the Party.
            maxLength: 128
            minLength: 1
            type: string
        PartyIdType:
            title: PartyIdType
            description: >-
                Below are the allowed values for the enumeration.

                - MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the
                phone number) is used as reference to a participant. The MSISDN identifier should be in
                international format according to the [ITU-T E.164
                standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a
                single plus sign, indicating the international prefix.

                - EMAIL - An email is used as reference to a participant. The format of the email should be
                according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).

                - PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of
                personal identification are passport number, birth certificate number, and national
                registration number. The identifier number is added in the PartyIdentifier element. The
                personal identifier type is added in the PartySubIdOrType element.

                - BUSINESS - A specific Business (for example, an organization or a company) is used as
                reference to a participant. The BUSINESS identifier can be in any format. To make a
                transaction connected to a specific username or bill number in a Business, the
                PartySubIdOrType element should be used.

                - DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business
                or organization is used as reference to a Party. For referencing a specific device under a
                specific business or organization, use the PartySubIdOrType element.

                - ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a
                participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ
                depending on country and FSP.

                - IBAN - A bank account number or FSP account ID is used as reference to a participant. The
                IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without
                whitespace.

                - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP
                as an alternative reference to an account owner. Another example of an alias is a username in
                the FSP system. The ALIAS identifier can be in any format. It is also possible to use the
                PartySubIdOrType element for identifying an account under an Alias defined by the
                PartyIdentifier.
            enum:
                - MSISDN
                - EMAIL
                - PERSONAL_ID
                - BUSINESS
                - DEVICE
                - ACCOUNT_ID
                - IBAN
                - ALIAS
            type: string
        PartyName:
            title: PartyName
            description: Name of the Party. Could be a real name or a nickname.
            maxLength: 128
            minLength: 1
            type: string
        PartySubIdOrType:
            title: PartySubIdOrType
            description: >-
                Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a
                PersonalIdentifierType.
            maxLength: 128
            minLength: 1
            type: string
        PersonalIdentifierType:
            title: PersonalIdentifierType
            description: |-
                Below are the allowed values for the enumeration.
                - PASSPORT - A passport number is used as reference to a Party.
                - NATIONAL_REGISTRATION - A national registration number is used as reference to a Party.
                - DRIVING_LICENSE - A driving license is used as reference to a Party.
                - ALIEN_REGISTRATION - An alien registration number is used as reference to a Party.
                - NATIONAL_ID_CARD - A national ID card number is used as reference to a Party.
                - EMPLOYER_ID - A tax identification number is used as reference to a Party.
                - TAX_ID_NUMBER - A tax identification number is used as reference to a Party.
                - SENIOR_CITIZENS_CARD - A senior citizens card number is used as reference to a Party.
                - MARRIAGE_CERTIFICATE - A marriage certificate number is used as reference to a Party.
                - HEALTH_CARD - A health card number is used as reference to a Party.
                - VOTERS_ID - A voter’s identification number is used as reference to a Party.
                - UNITED_NATIONS - An UN (United Nations) number is used as reference to a Party.
                - OTHER_ID - Any other type of identification type number is used as reference to a Party.
            enum:
                - PASSPORT
                - NATIONAL_REGISTRATION
                - DRIVING_LICENSE
                - ALIEN_REGISTRATION
                - NATIONAL_ID_CARD
                - EMPLOYER_ID
                - TAX_ID_NUMBER
                - SENIOR_CITIZENS_CARD
                - MARRIAGE_CERTIFICATE
                - HEALTH_CARD
                - VOTERS_ID
                - UNITED_NATIONS
                - OTHER_ID
            type: string
        QRCODE:
            title: QRCODE
            description: QR code used as a One Time Password.
            maxLength: 64
            minLength: 1
            type: string
        RefundReason:
            title: RefundReason
            description: Reason for the refund.
            maxLength: 128
            minLength: 1
            type: string
        TokenCode:
            title: TokenCode
            description: >-
                The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits
                or upper- or lowercase characters from a to z.
            pattern: '^[0-9a-zA-Z]{4,32}$'
            type: string
        TransactionInitiator:
            title: TransactionInitiator
            description: >-
                Below are the allowed values for the enumeration.

                - PAYER - Sender of funds is initiating the transaction. The account to send from is either
                owned by the Payer or is connected to the Payer in some way.

                - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction
                request. The Payer must approve the transaction, either automatically by a pre-generated OTP
                or by pre-approval of the Payee, or by manually approving in his or her own Device.
            enum:
                - PAYER
                - PAYEE
            type: string
        TransactionInitiatorType:
            title: TransactionInitiatorType
            description: |-
                Below are the allowed values for the enumeration.
                - CONSUMER - Consumer is the initiator of the transaction.
                - AGENT - Agent is the initiator of the transaction.
                - BUSINESS - Business is the initiator of the transaction.
                - DEVICE - Device is the initiator of the transaction.
            enum:
                - CONSUMER
                - AGENT
                - BUSINESS
                - DEVICE
            type: string
        TransactionRequestState:
            title: TransactionRequestState
            description: |-
                Below are the allowed values for the enumeration.
                - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
                - PENDING - Payer FSP has sent the transaction request to the Payer.
                - ACCEPTED - Payer has approved the transaction.
                - REJECTED - Payer has rejected the transaction.
            enum:
                - RECEIVED
                - PENDING
                - ACCEPTED
                - REJECTED
            type: string
        TransactionScenario:
            title: TransactionScenario
            description: >-
                Below are the allowed values for the enumeration.

                - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario,
                electronic funds are transferred from a Business account to a Consumer account, and physical
                cash is given from the Consumer to the Business User.

                - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario,
                electronic funds are transferred from a Consumer’s account to a Business account, and physical
                cash is given from the Business User to the Consumer.

                - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.

                - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or
                Organization, but could also be for a B2B (Business to Business) payment. The transaction
                could be online for a purchase in an Internet store, in a physical store where both the
                Consumer and Business User are present, a bill payment, a donation, and so on.

                - REFUND - Used for performing a refund of transaction.
            enum:
                - DEPOSIT
                - WITHDRAWAL
                - TRANSFER
                - PAYMENT
                - REFUND
            type: string
        TransactionState:
            title: TransactionState
            description: |-
                Below are the allowed values for the enumeration.
                - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
                - PENDING - Payee FSP has validated the transaction.
                - COMPLETED - Payee FSP has successfully performed the transaction.
                - REJECTED - Payee FSP has failed to perform the transaction.
            enum:
                - RECEIVED
                - PENDING
                - COMPLETED
                - REJECTED
            type: string
        TransactionSubScenario:
            title: TransactionSubScenario
            description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'
            pattern: '^[A-Z_]{1,32}$'
            type: string
        TransferState:
            title: TransferState
            description: >-
                Below are the allowed values for the enumeration.

                - RECEIVED - Next ledger has received the transfer.

                - RESERVED - Next ledger has reserved the transfer.

                - COMMITTED - Next ledger has successfully performed the transfer.

                - ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the
                transfer.
            enum:
                - RECEIVED
                - RESERVED
                - COMMITTED
                - ABORTED
            type: string
        UndefinedEnum:
            title: UndefinedEnum
            description: >-
                The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters
                including an underscore character (_).
            pattern: '^[A-Z_]{1,32}$'
            type: string
        AuthenticationInfo:
            title: AuthenticationInfo
            description: Data model for the complex type AuthenticationInfo.
            required:
                - authentication
                - authenticationValue
            type: object
            properties:
                authentication:
                    description: Type of authentication.
                    type: string
                    example: OTP
                authenticationValue:
                    description: Authentication value.
                    type: string
                    example: 1234
        ErrorInformationObject:
            title: ErrorInformationObject
            description: Data model for the complex type object that contains ErrorInformation.
            required:
                - errorInformation
            type: object
            properties:
                errorInformation:
                    $ref: '#/components/schemas/ErrorInformation'
        ErrorInformationResponse:
            title: ErrorInformationResponse
            description: >-
                Data model for the complex type object that contains an optional element ErrorInformation used
                along with 4xx and 5xx responses.
            type: object
            properties:
                errorInformation:
                    $ref: '#/components/schemas/ErrorInformation'
        ExtensionList:
            title: ExtensionList
            description: >-
                Data model for the complex type ExtensionList. An optional list of extensions, specific to
                deployment.
            required:
                - extension
            type: object
            properties:
                extension:
                    description: Number of Extension elements.
                    maxItems: 16
                    minItems: 1
                    type: array
                    items:
                        $ref: '#/components/schemas/Extension'
        GeoCode:
            title: GeoCode
            description: >-
                Data model for the complex type GeoCode. Indicates the geographic location from where the
                transaction was initiated.
            required:
                - latitude
                - longitude
            type: object
            properties:
                latitude:
                    description: Latitude of the Party.
                    type: string
                    example: '+45.4215'
                longitude:
                    description: Longitude of the Party.
                    type: string
                    example: '+75.6972'
        Money:
            title: Money
            description: Data model for the complex type Money.
            required:
                - currency
                - amount
            type: object
            properties:
                currency:
                    description: Currency of the amount.
                    type: string
                    example: USD
                amount:
                    description: Amount of Money.
                    type: string
                    example: 123.45
        ParticipantsIDPutResponse:
            title: ParticipantsIDPutResponse
            description: 'The object sent in the PUT /participants/{ID} callback.'
            required:
                - partyList
            type: object
            properties:
                partyList:
                    description: List of PartyResult elements that were either created or failed to be created.
                    maxItems: 10000
                    minItems: 1
                    type: array
                    items:
                        $ref: '#/components/schemas/PartyResult'
                currency:
                    description: >-
                        Indicate that the provided Currency was set to be supported by each successfully added
                        PartyIdInfo.
                    type: string
                    example: USD
        PartiesTypeIDPutResponse:
            title: PartiesTypeIDPutResponse
            description: 'The object sent in the PUT /parties/{Type}/{ID} callback.'
            required:
                - party
            type: object
            properties:
                party:
                    $ref: '#/components/schemas/Party'
                    description: Information regarding the requested Party.
        PartyPersonalInfo:
            title: PartyPersonalInfo
            description: Data model for the complex type PartyPersonalInfo.
            type: object
            properties:
                complexName:
                    $ref: '#/components/schemas/PartyComplexName'
                    description: 'First, middle and last name for the Party.'
                dateOfBirth:
                    description: Date of birth for the Party.
                    type: string
                    example: '1966-06-16'
        PartyResult:
            title: PartyResult
            description: Data model for the complex type PartyResult.
            required:
                - partyId
            type: object
            properties:
                partyId:
                    $ref: '#/components/schemas/PartyIdInfo'
                    description: 'Party Id type, id, sub ID or type, and FSP Id.'
                errorInformation:
                    $ref: '#/components/schemas/ErrorInformation'
                    description: >-
                        If the Party failed to be added, error information should be provided. Otherwise, this
                        parameter should be empty to indicate success.
        QuotesIDPutResponse:
            title: QuotesIDPutResponse
            description: 'The object sent in the PUT /quotes/{ID} callback.'
            required:
                - transferAmount
                - expiration
                - ilpPacket
                - condition
            type: object
            properties:
                transferAmount:
                    properties:
                        currency:
                            description: Currency of the amount.
                            type: string
                            example: USD
                        amount:
                            description: Amount of money.
                            type: string
                            example: 124.45
                payeeReceiveAmount:
                    properties:
                        currency:
                            description: Currency of the amount.
                            type: string
                            example: USD
                        amount:
                            description: Amount of money.
                            type: string
                            example: 123.45
                payeeFspFee:
                    properties:
                        currency:
                            description: Currency of the amount.
                            type: string
                            example: USD
                        amount:
                            description: Amount of money.
                            type: string
                            example: 1.45
                payeeFspCommission:
                    properties:
                        currency:
                            description: Currency of the amount.
                            type: string
                            example: USD
                        amount:
                            description: Amount of money.
                            type: string
                            example: 0
                expiration:
                    description: >-
                        Date and time until when the quotation is valid and can be honored when used in the
                        subsequent transaction.
                    type: string
                    example: '2016-05-24T08:38:08.699-04:00'
                geoCode:
                    $ref: '#/components/schemas/GeoCode'
                    description: Longitude and Latitude of the Payee. Can be used to detect fraud.
                ilpPacket:
                    description: The ILP Packet that must be attached to the transfer by the Payer.
                    type: string
                    example: >-
                        “AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA”
                condition:
                    description: The condition that must be attached to the transfer by the Payer.
                    type: string
                    example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        QuotesPostRequest:
            title: QuotesPostRequest
            description: The object sent in the POST /quotes request.
            required:
                - quoteId
                - transactionId
                - payee
                - payer
                - amountType
                - amount
                - transactionType
            type: object
            properties:
                quoteId:
                    description: >-
                        Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID
                        should be reused for resends of the same quote for a transaction. A new ID should be
                        generated for each new quote for a transaction.
                    type: string
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transactionId:
                    description: >-
                        Common ID (decided by the Payer FSP) between the FSPs for the future transaction
                        object. The actual transaction will be created as part of a successful transfer
                        process. The ID should be reused for resends of the same quote for a transaction. A
                        new ID should be generated for each new quote for a transaction.
                    type: string
                    example: a8323bc6-c228-4df2-ae82-e5a997baf899
                transactionRequestId:
                    description: Identifies an optional previously-sent transaction request.
                    type: string
                    example: a8323bc6-c228-4df2-ae82-e5a997baf890
                payee:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payee in the proposed financial transaction.
                payer:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payer in the proposed financial transaction.
                    properties:
                        partyIdInfo:
                            properties:
                                partyIdType:
                                    description: >-
                                        Information about the Payer in the proposed financial transaction.
                                        Type of the identifier.
                                    type: string
                                    example: PERSONAL_ID
                                partyIdentifier:
                                    description: >-
                                        Information about the Payer in the proposed financial transaction. An
                                        indentifier for the Party.
                                    type: string
                                    example: 16135551212
                                partySubIdOrType:
                                    description: >-
                                        Information about the Payer in the proposed financial transaction. A
                                        sub-identifier or sub-type for the Party.
                                    type: string
                                    example: PASSPORT
                                fspId:
                                    description: FSP ID (if known).
                                    type: string
                                    example: 1234
                        merchantClassificationCode:
                            description: >-
                                Used in the context of Payee Information, where the Payee happens to be a
                                merchant accepting merchant payments.
                            type: string
                            example: 1234
                        name:
                            description: 'Display name of the Party, could be a real name or a nick name.'
                            type: string
                            example: Lars Bergqvist
                        personalInfo:
                            properties:
                                complexName:
                                    properties:
                                        firstName:
                                            description: Party’s first name.
                                            type: string
                                            example: Lars
                                        middleName:
                                            description: Party’s middle name.
                                            type: string
                                            example: Per
                                        lastName:
                                            description: Party’s last name.
                                            type: string
                                            example: Bergqvist
                                dateOfBirth:
                                    description: Date of birth for the Party.
                                    type: string
                                    example: '1977-07-17'
                amountType:
                    description: 'SEND for send amount, RECEIVE for receive amount.'
                    type: string
                    example: SEND
                amount:
                    properties:
                        currency:
                            description: Currency of the amount.
                            type: string
                            example: USD
                        amount:
                            description: Amount of money.
                            type: string
                            example: 123.45
                fees:
                    properties:
                        currency:
                            description: Currency of the amount.
                            type: string
                            example: USD
                        amount:
                            description: Amount of money.
                            type: string
                            example: 1.25
                transactionType:
                    $ref: '#/components/schemas/TransactionType'
                    description: Type of transaction for which the quote is requested.
                geoCode:
                    $ref: '#/components/schemas/GeoCode'
                    description: Longitude and Latitude of the initiating Party. Can be used to detect fraud.
                note:
                    description: A memo that will be attached to the transaction.
                    type: string
                    example: Free-text memo.
                expiration:
                    description: >-
                        Expiration is optional. It can be set to get a quick failure in case the peer FSP
                        takes too long to respond. Also, it may be beneficial for Consumer, Agent, and
                        Merchant to know that their request has a time limit.
                    type: string
                    example: '2016-05-24T08:38:08.699-04:00'
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        Refund:
            title: Refund
            description: Data model for the complex type Refund.
            required:
                - originalTransactionId
            type: object
            properties:
                originalTransactionId:
                    description: Reference to the original transaction ID that is requested to be refunded.
                    type: string
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                refundReason:
                    description: Free text indicating the reason for the refund.
                    type: string
                    example: Free text indicating reason for the refund.
        Transaction:
            title: Transaction
            description: >-
                Data model for the complex type Transaction. The Transaction type is used to carry end-to-end
                data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the
                quoteId in the data model are decided by the Payer FSP in the POST /quotes request.
            required:
                - transactionId
                - quoteId
                - payee
                - payer
                - amount
                - transactionType
            type: object
            properties:
                transactionId:
                    description: >-
                        ID of the transaction, the ID is decided by the Payer FSP during the creation of the
                        quote.
                    type: string
                quoteId:
                    description: 'ID of the quote, the ID is decided by the Payer FSP during the creation of the quote.'
                    type: string
                payee:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payee in the proposed financial transaction.
                payer:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payer in the proposed financial transaction.
                amount:
                    $ref: '#/components/schemas/Money'
                    description: Transaction amount to be sent.
                transactionType:
                    $ref: '#/components/schemas/TransactionType'
                    description: Type of the transaction.
                note:
                    description: 'Memo associated to the transaction, intended to the Payee.'
                    type: string
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        TransactionRequestsIDPutResponse:
            title: TransactionRequestsIDPutResponse
            description: 'The object sent in the PUT /transactionRequests/{ID} callback.'
            required:
                - transactionRequestState
            type: object
            properties:
                transactionId:
                    description: Identifies a related transaction (if a transaction has been created).
                    type: string
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transactionRequestState:
                    description: State of the transaction request.
                    type: string
                    example: RECEIVED
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        TransactionRequestsPostRequest:
            title: TransactionRequestsPostRequest
            description: The object sent in the POST /transactionRequests request.
            required:
                - transactionRequestId
                - payee
                - payer
                - amount
                - transactionType
            type: object
            properties:
                transactionRequestId:
                    description: >-
                        Common ID between the FSPs for the transaction request object, decided by the Payee
                        FSP. The ID should be reused for resends of the same transaction request. A new ID
                        should be generated for each new transaction request.
                    type: string
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                payee:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payee in the proposed financial transaction.
                payer:
                    $ref: '#/components/schemas/PartyIdInfo'
                    description: >-
                        Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial
                        transaction.
                amount:
                    $ref: '#/components/schemas/Money'
                    description: Requested amount to be transferred from the Payer to Payee.
                transactionType:
                    $ref: '#/components/schemas/TransactionType'
                    description: Type of transaction.
                note:
                    description: 'Reason for the transaction request, intended to the Payer.'
                    type: string
                    example: Free-text memo.
                geoCode:
                    $ref: '#/components/schemas/GeoCode'
                    description: Longitude and Latitude of the initiating Party. Can be used to detect fraud.
                authenticationType:
                    description: 'OTP or QR Code, otherwise empty.'
                    type: string
                    example: OTP
                expiration:
                    description: >-
                        Can be set to get a quick failure in case the peer FSP takes too long to respond.
                        Also, it may be beneficial for Consumer, Agent, Merchant to know that their request
                        has a time limit.
                    type: string
                    example: '2016-05-24T08:38:08.699-04:00'
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        TransactionsIDPutResponse:
            title: TransactionsIDPutResponse
            description: 'The object sent in the PUT /transactions/{ID} callback.'
            required:
                - transactionState
            type: object
            properties:
                completedTimestamp:
                    description: Time and date when the transaction was completed.
                    type: string
                    example: '2016-05-24T08:38:08.699-04:00'
                transactionState:
                    description: State of the transaction.
                    type: string
                    example: RECEIVED
                code:
                    description: >-
                        Optional redemption information provided to Payer after transaction has been
                        completed.
                    type: string
                    example: Test-Code
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        TransactionType:
            title: TransactionType
            description: Data model for the complex type TransactionType.
            required:
                - scenario
                - initiator
                - initiatorType
            type: object
            properties:
                scenario:
                    description: 'Deposit, withdrawal, refund, …'
                    type: string
                    example: DEPOSIT
                subScenario:
                    description: 'Possible sub-scenario, defined locally within the scheme.'
                    type: string
                    example: Locally defined sub-scenario.
                initiator:
                    description: Who is initiating the transaction - Payer or Payee.
                    type: string
                    example: PAYEE
                initiatorType:
                    description: 'Consumer, agent, business, …'
                    type: string
                    example: CONSUMER
                refundInfo:
                    $ref: '#/components/schemas/Refund'
                    description: >-
                        Extra information specific to a refund scenario. Should only be populated if scenario
                        is REFUND.
                balanceOfPayments:
                    description: Balance of Payments code.
                    type: string
                    example: 123
        TransfersIDPutResponse:
            title: TransfersIDPutResponse
            description: 'The object sent in the PUT /transfers/{ID} callback.'
            required:
                - transferState
            type: object
            properties:
                fulfilment:
                    description: >-
                        Fulfilment of the condition specified with the transaction. Mandatory if transfer has
                        completed successfully.
                    type: string
                    example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                completedTimestamp:
                    description: Time and date when the transaction was completed.
                    type: string
                    example: '2016-05-24T08:38:08.699-04:00'
                transferState:
                    description: State of the transfer.
                    type: string
                    example: RESERVED
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        TransfersPostRequest:
            title: TransfersPostRequest
            description: The object sent in the POST /transfers request.
            required:
                - transferId
                - payeeFsp
                - payerFsp
                - amount
                - ilpPacket
                - condition
                - expiration
            type: object
            properties:
                transferId:
                    description: >-
                        The common ID between the FSPs and the optional Switch for the transfer object,
                        decided by the Payer FSP. The ID should be reused for resends of the same transfer. A
                        new ID should be generated for each new transfer.
                    type: string
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                payeeFsp:
                    description: Payee FSP in the proposed financial transaction.
                    type: string
                    example: 1234
                payerFsp:
                    description: Payer FSP in the proposed financial transaction.
                    type: string
                    example: 5678
                amount:
                    $ref: '#/components/schemas/Money'
                    description: The transfer amount to be sent.
                ilpPacket:
                    description: >-
                        The ILP Packet containing the amount delivered to the Payee and the ILP Address of the
                        Payee and any other end-to-end data.
                    type: string
                    example: >-
                        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                condition:
                    description: The condition that must be fulfilled to commit the transfer.
                    type: string
                    example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
                expiration:
                    description: >-
                        Expiration can be set to get a quick failure expiration of the transfer. The transfer
                        should be rolled back if no fulfilment is delivered before this time.
                    type: string
                    example: '2016-05-24T08:38:08.699-04:00'
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        AuthorizationsIDPutResponse:
            title: AuthorizationsIDPutResponse
            description: 'The object sent in the PUT /authorizations/{ID} callback.'
            required:
                - responseType
            type: object
            properties:
                authenticationInfo:
                    description: 'OTP or QR Code if entered, otherwise empty.'
                    type: string
                    example: OTP
                responseType:
                    $ref: '#/components/schemas/AuthorizationResponse'
                    description: >-
                        Enum containing response information; if the customer entered the authentication
                        value, rejected the transaction, or requested a resend of the authentication value.
                    example: ENTERED
        BulkQuotesIDPutResponse:
            title: BulkQuotesIDPutResponse
            description: 'The object sent in the PUT /bulkQuotes/{ID} callback.'
            required:
                - expiration
            type: object
            properties:
                individualQuoteResults:
                    description: 'Fees for each individual transaction, if any of them are charged per transaction.'
                    maxItems: 1000
                    type: array
                    items:
                        $ref: '#/components/schemas/IndividualQuoteResult'
                expiration:
                    $ref: '#/components/schemas/DateTime'
                    description: >-
                        Date and time until when the quotation is valid and can be honored when used in the
                        subsequent transaction request.
                    example: '2016-05-24T08:38:08.699-04:00'
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        BulkQuotesPostRequest:
            title: BulkQuotesPostRequest
            description: The object sent in the POST /bulkQuotes request.
            required:
                - bulkQuoteId
                - payer
                - individualQuotes
            type: object
            properties:
                bulkQuoteId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: >-
                        Common ID between the FSPs for the bulk quote object, decided by the Payer FSP. The ID
                        should be reused for resends of the same bulk quote. A new ID should be generated for
                        each new bulk quote.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                payer:
                    $ref: '#/components/schemas/Party'
                geoCode:
                    $ref: '#/components/schemas/GeoCode'
                    description: Longitude and Latitude of the initiating Party. Can be used to detect fraud.
                expiration:
                    $ref: '#/components/schemas/DateTime'
                    description: >-
                        Expiration is optional to let the Payee FSP know when a quote no longer needs to be
                        returned.
                    example: '2016-05-24T08:38:08.699-04:00'
                individualQuotes:
                    properties:
                        quoteId:
                            $ref: '#/components/schemas/CorrelationId'
                            description: Identifies quote message.
                            example: b51ec534-ee48-4575-b6a9-ead2955b8069
                        transactionId:
                            $ref: '#/components/schemas/CorrelationId'
                            description: Identifies transaction message.
                            example: b51ec534-ee48-4575-b6a9-ead2955b8069
                        payee:
                            $ref: '#/components/schemas/Party'
                        amountType:
                            $ref: '#/components/schemas/AmountType'
                        amount:
                            $ref: '#/components/schemas/Money'
                        fees:
                            $ref: '#/components/schemas/Money'
                        transactionType:
                            $ref: '#/components/schemas/TransactionType'
                            description: Type of transaction that the quote is requested for.
                        note:
                            description: Memo that will be attached to the transaction.
                            type: string
                            example: Note sent to Payee.
                        extensionList:
                            $ref: '#/components/schemas/ExtensionList'
                            description: 'Optional extension, specific to deployment.'
        BulkTransfersIDPutResponse:
            title: BulkTransfersIDPutResponse
            description: 'The object sent in the PUT /bulkTransfers/{ID} callback.'
            required:
                - bulkTransferState
            type: object
            properties:
                completedTimestamp:
                    $ref: '#/components/schemas/DateTime'
                    description: Time and date when the bulk transaction was completed.
                    example: '2016-05-24T08:38:08.699-04:00'
                individualTransferResults:
                    description: List of IndividualTransferResult elements.
                    maxItems: 1000
                    type: array
                    items:
                        $ref: '#/components/schemas/IndividualTransferResult'
                bulkTransferState:
                    $ref: '#/components/schemas/BulkTransferState'
                    description: The state of the bulk transfer.
                    example: RECEIVED
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        BulkTransfersPostRequest:
            title: BulkTransfersPostRequest
            description: The object sent in the POST /bulkTransfers request.
            required:
                - bulkTransferId
                - bulkQuoteId
                - payerFsp
                - payeeFsp
                - individualTransfers
                - expiration
            type: object
            properties:
                bulkTransferId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: >-
                        Common ID between the FSPs and the optional Switch for the bulk transfer object,
                        decided by the Payer FSP. The ID should be reused for resends of the same bulk
                        transfer. A new ID should be generated for each new bulk transfer.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                bulkQuoteId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: ID of the related bulk quote.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                payerFsp:
                    description: Payer FSP identifier.
                    type: string
                    example: 5678
                payeeFsp:
                    description: Payee FSP identifier.
                    type: string
                    example: 1234
                individualTransfers:
                    description: List of IndividualTransfer elements.
                    maxItems: 1000
                    minItems: 1
                    type: array
                    items:
                        $ref: '#/components/schemas/IndividualTransfer'
                expiration:
                    $ref: '#/components/schemas/DateTime'
                    description: Expiration time of the transfers.
                    example: '2016-05-24T08:38:08.699-04:00'
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        ErrorInformation:
            title: ErrorInformation
            description: Data model for the complex type ErrorInformation.
            required:
                - errorCode
                - errorDescription
            type: object
            properties:
                errorCode:
                    $ref: '#/components/schemas/ErrorCode'
                    description: Specific error number.
                    example: 5100
                errorDescription:
                    $ref: '#/components/schemas/ErrorDescription'
                    description: Error description string.
                    example: This is an error description.
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
        Extension:
            title: Extension
            description: Data model for the complex type Extension.
            required:
                - key
                - value
            type: object
            properties:
                key:
                    $ref: '#/components/schemas/ExtensionKey'
                    description: Extension key.
                value:
                    $ref: '#/components/schemas/ExtensionValue'
                    description: Extension value.
        IndividualQuote:
            title: IndividualQuote
            description: Data model for the complex type IndividualQuote.
            required:
                - quoteId
                - transactionId
                - payee
                - amountType
                - amount
                - transactionType
            type: object
            properties:
                quoteId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: Identifies the quote message.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transactionId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: Identifies the transaction message.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                payee:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payee in the proposed financial transaction.
                amountType:
                    $ref: '#/components/schemas/AmountType'
                    description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
                    example: RECEIVE
                amount:
                    $ref: '#/components/schemas/Money'
                fees:
                    $ref: '#/components/schemas/Money'
                transactionType:
                    $ref: '#/components/schemas/TransactionType'
                    description: Type of transaction that the quote is requested for.
                note:
                    description: Memo that will be attached to the transaction.
                    type: string
                    example: Note sent to Payee.
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        IndividualQuoteResult:
            title: IndividualQuoteResult
            description: Data model for the complex type IndividualQuoteResult.
            required:
                - quoteId
            type: object
            properties:
                quoteId:
                    description: Identifies the quote message.
                    type: string
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                payee:
                    $ref: '#/components/schemas/Party'
                    description: Information about the Payee in the proposed financial transaction.
                transferAmount:
                    $ref: '#/components/schemas/Money'
                payeeReceiveAmount:
                    $ref: '#/components/schemas/Money'
                payeeFspFee:
                    $ref: '#/components/schemas/Money'
                payeeFspCommission:
                    $ref: '#/components/schemas/Money'
                ilpPacket:
                    $ref: '#/components/schemas/IlpPacket'
                    description: The ILP Packet that must be attached to the transfer by the Payer.
                    example: >-
                        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                condition:
                    $ref: '#/components/schemas/IlpCondition'
                    description: The condition that must be attached to the transfer by the Payer.
                    example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
                errorInformation:
                    $ref: '#/components/schemas/ErrorInformation'
                    description: >-
                        Error code, category description. **Note:** receiveAmount, payeeFspFee,
                        payeeFspCommission, expiration, ilpPacket, condition should not be set if
                        errorInformation is set.
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        IndividualTransfer:
            title: IndividualTransfer
            description: Data model for the complex type IndividualTransfer.
            required:
                - transferId
                - transferAmount
                - ilpPacket
                - condition
            type: object
            properties:
                transferId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: Identifies messages related to the same /transfers sequence.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                transferAmount:
                    $ref: '#/components/schemas/Money'
                    description: Transaction amount to be sent.
                ilpPacket:
                    $ref: '#/components/schemas/IlpPacket'
                    description: >-
                        ILP Packet containing the amount delivered to the Payee and the ILP Address of the
                        Payee and any other end-to-end data.
                    example: >-
                        AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
                condition:
                    $ref: '#/components/schemas/IlpCondition'
                    description: Condition that must be fulfilled to commit the transfer.
                    example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        IndividualTransferResult:
            title: IndividualTransferResult
            description: Data model for the complex type IndividualTransferResult.
            required:
                - transferId
            type: object
            properties:
                transferId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: Identifies messages related to the same /transfers sequence.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                fulfilment:
                    $ref: '#/components/schemas/IlpFulfilment'
                    description: >-
                        Fulfilment of the condition specified with the transaction. **Note:** Either
                        fulfilment or errorInformation should be set, not both.
                    example: WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8
                errorInformation:
                    $ref: '#/components/schemas/ErrorInformation'
                    description: >-
                        If transfer is REJECTED, error information may be provided. **Note:** Either
                        fulfilment or errorInformation should be set, not both.
                extensionList:
                    $ref: '#/components/schemas/ExtensionList'
                    description: 'Optional extension, specific to deployment.'
        ParticipantsPostRequest:
            title: ParticipantsPostRequest
            description: The object sent in the POST /participants request.
            required:
                - requestId
                - partyList
            type: object
            properties:
                requestId:
                    $ref: '#/components/schemas/CorrelationId'
                    description: >-
                        The ID of the request, decided by the client. Used for identification of the callback
                        from the server.
                    example: b51ec534-ee48-4575-b6a9-ead2955b8069
                partyList:
                    description: >-
                        List of PartyIdInfo elements that the client would like to update or create FSP
                        information about.
                    maxItems: 10000
                    minItems: 1
                    type: array
                    items:
                        $ref: '#/components/schemas/PartyIdInfo'
                currency:
                    $ref: '#/components/schemas/Currency'
                    description: Indicate that the provided Currency is supported by each PartyIdInfo in the list.
                    example: USD
        ParticipantsTypeIDPutResponse:
            title: ParticipantsTypeIDPutResponse
            description: >-
                The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID}
                callbacks.
            type: object
            properties:
                fspId:
                    $ref: '#/components/schemas/FspId'
                    description: FSP Identifier that the Party belongs to.
                    example: 1234
        ParticipantsTypeIDSubIDPostRequest:
            title: ParticipantsTypeIDSubIDPostRequest
            description: >-
                The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID}
                requests.
            required:
                - fspId
            type: object
            properties:
                fspId:
                    $ref: '#/components/schemas/FspId'
                    description: FSP Identifier that the Party belongs to.
                    example: 1234
                currency:
                    $ref: '#/components/schemas/Currency'
                    description: Indicate that the provided Currency is supported by the Party.
                    example: USD
        Party:
            title: Party
            description: Data model for the complex type Party.
            required:
                - partyIdInfo
            type: object
            properties:
                partyIdInfo:
                    $ref: '#/components/schemas/PartyIdInfo'
                    description: 'Party Id type, id, sub ID or type, and FSP Id.'
                merchantClassificationCode:
                    $ref: '#/components/schemas/MerchantClassificationCode'
                    description: >-
                        Used in the context of Payee Information, where the Payee happens to be a merchant
                        accepting merchant payments.
                    example: 4321
                name:
                    $ref: '#/components/schemas/Name'
                    description: 'Display name of the Party, could be a real name or a nick name.'
                    example: Henrik Karlsson
                personalInfo:
                    $ref: '#/components/schemas/PartyPersonalInfo'
                    description: >-
                        Personal information used to verify identity of Party such as first, middle, last name
                        and date of birth.
        PartyComplexName:
            title: PartyComplexName
            description: Data model for the complex type PartyComplexName.
            type: object
            properties:
                firstName:
                    $ref: '#/components/schemas/FirstName'
                    description: Party’s first name.
                    example: Henrik
                middleName:
                    $ref: '#/components/schemas/MiddleName'
                    description: Party’s middle name.
                    example: Johannes
                lastName:
                    $ref: '#/components/schemas/LastName'
                    description: Party’s last name.
                    example: Karlsson
        PartyIdInfo:
            title: PartyIdInfo
            description: Data model for the complex type PartyIdInfo.
            required:
                - partyIdType
                - partyIdentifier
            type: object
            properties:
                partyIdType:
                    description: Type of the identifier.
                    type: string
                    example: PERSONAL_ID
                partyIdentifier:
                    $ref: '#/components/schemas/PartyIdentifier'
                    description: An identifier for the Party.
                    example: 16135551212
                partySubIdOrType:
                    description: A sub-identifier or sub-type for the Party.
                    type: string
                    example: DRIVING_LICENSE
                fspId:
                    description: FSP ID (if known).
                    type: string
                    example: 1234
    responses:
        '200':
            description: OK
        '202':
            description: Accepted
        '400':
            description: Bad Request
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '401':
            description: Unauthorized
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '403':
            description: Forbidden
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '404':
            description: Not Found
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '405':
            description: Method Not Allowed
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '406':
            description: Not Acceptable
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '501':
            description: Not Implemented
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
        '503':
            description: Service Unavailable
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorInformationResponse'
    parameters:
        Date:
            name: Date
            in: header
            description: The `Date` header field indicates the date when the request was sent.
            required: true
            schema:
                type: string
        X-Forwarded-For:
            name: X-Forwarded-For
            in: header
            description: >-
                The `X-Forwarded-For` header field is an unofficially accepted standard used for informational
                purposes of the originating client IP address, as a request might pass multiple proxies,
                firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by
                implementers of the API.


                **Note:** An alternative to `X-Forwarded-For` is defined in [RFC
                7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and
                supported than `X-Forwarded-For`.
            required: false
            schema:
                type: string
        FSPIOP-Source:
            name: FSPIOP-Source
            in: header
            description: >-
                The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying
                the sender of the HTTP request. The field should be set by the original sender of the request.
                Required for routing and signature verification (see header field `FSPIOP-Signature`).
            required: true
            schema:
                type: string
        FSPIOP-Destination:
            name: FSPIOP-Destination
            in: header
            description: >-
                The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP
                header based routing of requests and responses to the destination. The field should be set by
                the original sender of the request (if known), so that any entities between the client and the
                server do not need to parse the payload for routing purposes.
            required: false
            schema:
                type: string
        FSPIOP-Encryption:
            name: FSPIOP-Encryption
            in: header
            description: >-
                The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying
                end-to-end encryption of the request.
            required: false
            schema:
                type: string
        FSPIOP-Signature:
            name: FSPIOP-Signature
            in: header
            description: >-
                The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying
                an end-to-end request signature.
            required: false
            schema:
                type: string
        FSPIOP-URI:
            name: FSPIOP-URI
            in: header
            description: >-
                The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature
                verification, should contain the service URI. Required if signature verification is used, for
                more information, see [the API Signature
                document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
            required: false
            schema:
                type: string
        FSPIOP-HTTP-Method:
            name: FSPIOP-HTTP-Method
            in: header
            description: >-
                The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for
                signature verification, should contain the service HTTP method. Required if signature
                verification is used, for more information, see [the API Signature
                document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
            required: false
            schema:
                type: string
        ID:
            name: ID
            in: path
            description: The identifier value.
            required: true
            schema:
                type: string
        Type:
            name: Type
            in: path
            description: 'The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.'
            required: true
            schema:
                type: string
        SubId:
            name: SubId
            in: path
            description: >-
                A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For
                example, `PASSPORT`, `DRIVING_LICENSE`.
            required: true
            schema:
                type: string
